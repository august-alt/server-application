swagger: "2.0"
info:
  description: "This is a "
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "common"
  description: "Operations about app (?)"
- name: "metrics"
  description: "Operations about metrics"
- name: "users"
  description: "Operations about user"
- name: "roles"
  description: "Operation with user roles"
schemes:
- "https"
- "http"
paths:
  /common/info:
    get:
      tags:
      - "common"
      summary: "Return app info"
      operationId: "getInfo"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema: 
            type: "object"
            properties:
              app_version:
                type: "string"
  /metrics/{id}:
    get:
      tags:
      - "metrics"
      summary: "Return measurements on id"
      operationId: "getMetricsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Metrics"
        "404":
          description: "Mectrics on this id not found"
    put:
      tags:
      - "metrics"
      summary: "Update measurements on id"
      operationId: "putMetricsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Metrics"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "Mectrics on this id not found"
    post:
      tags:
      - "metrics"
      summary: "Post measurements on id"
      operationId: "postMetricsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Metrics"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "Mectrics on this id already exist"
    delete:
      tags:
      - "metrics"
      summary: "Post measurements on id"
      operationId: "deleteMetricsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "Mectrics on this id not found"
    
  /user:
    post:
      tags:
      - "users"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
  /users/createWithArray:
    post:
      tags:
      - "users"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
  /users/createWithList:
    post:
      tags:
      - "users"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
  /users/login:
    get:
      tags:
      - "users"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /users/logout:
    get:
      tags:
      - "users"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/{username}:
    get:
      tags:
      - "users"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "users"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "users"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /roles/{username}:
    get:
      tags:
      - "roles"
      summary: "Get user roles by user name"
      description: ""
      operationId: "getUserRolesByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name whose roles needs to be fetched"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items: 
              type: "string"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put: 
      tags:
      - "roles"
      summary: "Change user roles on given input array"
      operationId: "updateUserRoles"
      parameters:
      - name: "username"
        in: "path"
        description: "The name whose roles needs to be updated"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Array of new roles"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
  /roles/{username}/{role}:
    post:
      tags:
      - "roles"
      summary: "Add user role"
      description: "This can only be done by the logged in user."
      operationId: "addUserRole"
      parameters:
      - name: "username"
        in: "path"
        description: "Name that need to be updated"
        required: true
        type: "string"
      - name: "role"
        in: "path"
        description: "Role that need to be added"
        required: true
        type: "string"
      responses:
        "200":
          description: "Succesful operation"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "roles"
      summary: "Delete user role"
      description: "This can only be done by the logged in user."
      operationId: "deleteUserRole"
      parameters:
      - name: "username"
        in: "path"
        description: "Name that need to be updated"
        required: true
        type: "string"
      - name: "role"
        in: "path"
        description: "Role that need to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "Succesful operation"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Metric:
    type: "object"
    properties:
      x: 
        type: "number"
        format: "double"
      values:
        type: "array"
        items:
          type: "string"
  Metrics:
    type: "array"
    items: 
      $ref: "#/definitions/Metric"
      
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
